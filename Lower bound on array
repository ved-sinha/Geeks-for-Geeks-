/*
Given a sorted array consisting 0’s and 1’s. The task is to find the index of first ‘1’ in the given array.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. First line of each test case contains an Integer N denoting size of array and the second line contains N space separated 0 and 1.

Output:
For each test case, in a new line print the index of first 1. If 1 is not present in the array then print “-1”.

Constraints:
1 <= T <= 100
1 <= N <= 107
0 <= Ai <= 1018

Example:
Input:
2
10
0 0 0 0 0 0 1 1 1 1
4
0 0 0 0

Output:
6
-1

Explanation:
Testcase 1: First index where 1 is presented is 6
*/


#include<bits/stdc++.h>
using namespace std;
int main()
{
 int t;
 cin>>t;
 while(t--){
     int n,x;
     cin>>n>>x;
     int a[n];
     for(int i=0;i<n;i++)
     cin>>a[i];
     int *low=lower_bound(a,a+n,x);
     int *high=upper_bound(a,a+n,x);
     if(low==a+n || *low!=x || high==a+n || *high!=x){
         cout<<"-1";
         cout<<endl;
         break;
     }
     cout<<*low<<" ";
     cout<<high-low;
     cout<<endl;
 }
 return 0;
}
